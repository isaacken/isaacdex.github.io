{"version":3,"sources":["PokemonItem.js","Paginator.js","App.js","serviceWorker.js","index.js"],"names":["PokemonItem","renderType2","props","type_2","href","target","className","data-tip","src","image_folder","this","pokedex_number","type_1","pokemon_name","Component","page_init","page_last","App","openModal","setState","modalIsOpen","afterOpenModal","subtitle","style","color","closeModal","pad","num","size","s","length","componentWillMount","a","getData","loaded","limit","state","page","pokemonList","axios","get","then","response","data","results","forEach","e","url","push","name","number","id","types","setTimeout","pokemon","nextPage","prevPage","sort","b","onClick","map","k","type","loading_img","parseInt","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25cb32c5.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './assets/css/App.css';\nimport './assets/css/Types.css';\nimport ReactTooltip from 'react-tooltip';\n\nconst image_folder = process.env.PUBLIC_URL + '/assets/img';\n\nexport default class PokemonItem extends Component {\n  renderType2 = () => {\n    if (this.props.type_2)\n      return (\n        <a href={'https://www.pokemon.com/br/pokedex/?type='+this.props.type_2} target='_blank'>\n          <img className='pokemon-type pokemon-type-2' data-tip={this.props.type_2} src={image_folder+'/types/'+this.props.type_2+'.svg'} />\n        </a>\n      );\n  }\n\n  render() {\n    return (\n        <div className='pokemon-item'>\n            <ReactTooltip />\n            <figure className='pokemon-image-container'>\n                <img src={'https://assets.pokemon.com/assets/cms2/img/pokedex/full/'+this.props.pokedex_number+'.png'} />\n            </figure>\n            <a href={'https://www.pokemon.com/br/pokedex/'+this.props.pokedex_number} target='_blank' className={this.props.type_1 + '-title pokemon-item-title'}>\n                <h2>{this.props.pokemon_name}</h2>\n                <span className='pokemon-id'>#{this.props.pokedex_number}</span>\n            </a>\n            <a href={'https://www.pokemon.com/br/pokedex/?type='+this.props.type_1}>\n              <img className='pokemon-type pokemon-type-1' target='_blank' data-tip={this.props.type_1} src={image_folder+'/types/'+this.props.type_1+'.svg'} />\n            </a>\n            {this.renderType2()}\n        </div>\n    );\n  }\n}\n","import React,{Component} from 'react';\nimport './assets/css/App.css';\nimport './assets/css/Types.css';\nimport ReactTooltip from 'react-tooltip';\n\nconst image_folder = process.env.PUBLIC_URL + '/assets/img';\n\nexport default class PokemonItem extends Component {\n  render() {\n    return (\n        <div className='pagination'>\n            <img className='nav-btn-loading' src={image_folder+'/arrow_lft.svg'}/>\n            <div className='page-range'>\n                {this.props.page_init} - {this.props.page_last}\n            </div>\n            <img className='nav-btn-loading' src={image_folder+'/arrow_rgt.svg'}/>\n        </div>\n    );\n  }\n}\n","import React,{Component} from 'react';\nimport PokemonItem from './PokemonItem';\nimport Paginator from './Paginator';\nimport axios from 'axios';\nimport './assets/css/App.css';\n\nconst image_folder = process.env.PUBLIC_URL + '/assets/img';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 1,\n      pokemon: [],\n      loaded: false\n    }  \n  }\n\n  openModal = () => {\n    this.setState({modalIsOpen: true});\n  }\n\n  afterOpenModal = () => {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = '#f00';\n  }\n\n  closeModal = () => {\n    this.setState({modalIsOpen: false});\n  }\n\n  pad = (num, size) => {\n    var s = num+\"\";\n    while (s.length < size) s = \"0\" + s;\n    return s;\n  }\n\n  componentWillMount = async () => {\n    this.getData();\n  }\n\n  getData = async () => {\n    this.setState({loaded: false});\n    let limit = (this.state.page - 1) * 12;\n    let pokemonList = [];\n    let pokemon = axios.get('https://pokeapi.co/api/v2/pokemon/?offset='+limit+'&limit=12').then((response) => {\n      pokemon = response.data.results;\n      pokemon.forEach(async (e) => {\n        axios.get(e.url)\n        .then((response) => {\n          pokemonList.push({\n            name: response.data.name,\n            number: this.pad(response.data.id,3),\n            types: response.data.types\n          }); \n        });\n      });\n      setTimeout(() => {\n        do {\n          if (pokemonList.length >= 12)\n            this.setState({pokemon: pokemonList, loaded: true});\n        } while (pokemonList.length < 12);\n      },2000);\n    });\n  }\n\n  nextPage = () => {\n    this.setState({page: ++this.state.page}); \n    this.getData();\n  }\n\n  prevPage = () => {\n    if (this.state.page > 1) {\n      this.setState({page: --this.state.page}); \n      this.getData();\n    }\n  }\n\n  render() {\n    if (this.state.loaded) {\n      this.state.pokemon.sort((a,b) => a.number - b.number);\n      return (\n        <div className='pokedex'>\n          <div className='header'>\n            <h1><img src={image_folder + '/logo.svg'} /></h1>\n          </div>\n          <div className='pagination'>\n            <img className='nav-btn' onClick={this.prevPage} src={image_folder+'/arrow_lft.svg'}/>\n            <div className='page-range'>\n              {(this.state.page - 1) * 12 + 1} - {(this.state.page - 1) * 12 + 12}\n            </div>\n            <img className='nav-btn' onClick={this.nextPage} src={image_folder+'/arrow_rgt.svg'}/>\n          </div>\n          <div className='pokemon-list'>\n            {\n              this.state.pokemon.map((e,k) => {\n                if (e.types[1]) {\n                  return (\n                    <PokemonItem \n                      pokemon_name={e.name}\n                      pokedex_number={e.number}\n                      type_1={e.types[1].type.name}\n                      type_2={e.types[0].type.name} />\n                  );\n                } else {\n                  return (\n                    <PokemonItem \n                      pokemon_name={e.name}\n                      pokedex_number={e.number}\n                      type_1={e.types[0].type.name} />\n                  );\n                }\n              })\n            }\n          </div>\n          <div className='pagination'>\n            <img className='nav-btn' onClick={this.prevPage} src={image_folder+'/arrow_lft.svg'}/>\n            <div className='page-range'>\n              {(this.state.page - 1) * 12 + 1} - {(this.state.page - 1) * 12 + 12}\n            </div>\n            <img className='nav-btn' onClick={this.nextPage} src={image_folder+'/arrow_rgt.svg'}/>\n          </div>\n        </div>\n      );\n    } else {\n      let loading_img = parseInt(Math.random()*4) + 1;\n      return (\n        <div className='pokedex'>\n          <div className='header'>\n            <h1><img src={image_folder + '/logo.svg'} /></h1>\n          </div>\n          <Paginator page_init={(this.state.page - 1) * 12 + 1} page_last={(this.state.page - 1) * 12 + 12} />\n          <img className='loading-gif' src={image_folder+'/loading_'+loading_img+'.gif'} />\n          <Paginator page_init={(this.state.page - 1) * 12 + 1} page_last={(this.state.page - 1) * 12 + 12} />\n        </div>\n      );\n    } \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}